import aQute.bnd.gradle.Bundle
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://jitpack.io' }
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:latest.release'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version 'latest.release'
    id 'biz.aQute.bnd.builder' version 'latest.release'
    id "org.gradle.test-retry" version "latest.release"
    id 'io.github.gradle-nexus.publish-plugin' version 'latest.release'
    id 'signing'
    id "idea" // to download sources and javadoc in IDEA
    id "net.ltgt.errorprone" version "latest.release"
    id "io.freefair.lombok" version "latest.release"
    id "org.gradlex.reproducible-builds" version 'latest.release'
}

def jarVersion = "2.21.5"

def buildEvent = System.getenv("BUILD_EVENT")
def isRelease = buildEvent == "release"
def brn = System.getenv("BRANCH_REF_NAME")
def snap = brn == null || brn == "" ? "-SNAPSHOT" : "." + brn + "-SNAPSHOT"

// version is the variable the build actually uses.
version = isRelease ? jarVersion : jarVersion + snap

archivesBaseName = 'jnats'
group = 'io.nats'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters'])
    options.release.set(8) // javac --release 7â†’8..25+
    options.deprecation = true
    options.debug = true

    options.errorprone {
        enabled = true
        disableWarningsInGeneratedCode = true
        excludedPaths = ".*/(generated|test).*/.*"
        disable("UnusedVariable")
        disable("MissingSummary")
        disable("StringConcatToTextBlock")
        disable("InconsistentCapitalization")
        errorproneArgs = ["-XepExcludedPaths:.*/test/.*"]
    }
}

repositories {
    mavenCentral()
    maven { url = "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    implementation 'org.bouncycastle:bcprov-lts8on:2.73.7'
    implementation 'org.jspecify:jspecify:1.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.+'
    testImplementation 'io.nats:jnats-server-runner:2.0.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.12.3'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/examples/java']
        }
    }
}
task bundle(type: Bundle) {
    from sourceSets.main.output
    exclude("io/nats/examples/**")
}

jar {
    manifest {
        attributes('Automatic-Module-Name': 'io.nats.jnats')
    }
    bundle {
        bnd([
            'Implementation-Title'  : 'Java Nats',
            'Implementation-Version': jarVersion,
            'Implementation-Vendor' : 'nats.io',
            "Import-Package"        : "!org.bouncycastle:bcprov-lts8on"
        ])
        exclude("io/nats/examples/**")
    }
}

test {
    useJUnitPlatform()
    maxHeapSize = "2g"
    testLogging {
        exceptionFormat = 'full'
        events "started", "passed", "skipped", "failed"
        showStandardStreams = true
    }
    retry {
        failOnPassedAfterRetry = false
        maxFailures = 2
        maxRetries = 2
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
    systemProperty 'junit.jupiter.execution.timeout.default', '3m'
}

javadoc {
    options.overview = 'src/main/javadoc/overview.html' // relative to source root
    source = sourceSets.main.allJava
    title = "NATS.IO Java API"
    excludes = ['io/nats/client/impl',
                'io/nats/examples',
                "io/nats/client/api/ConsumerCreateRequest.java",
                "io/nats/client/api/MessageGetRequest.java"
    ]
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        if (!OperatingSystem.current().isWindows()) {
            exec {
                println "Updating favicon on all html files"
                workingDir 'build/docs/javadoc'
                // Only on linux, mac at this point
                commandLine 'find', '.', '-name', '*.html', '-exec', 'sed', '-i', '-e', 's#<head>#<head><link rel="icon" type="image/ico" href="favicon.ico">#', '{}', ';'
            }
            copy {
                println "Copying images to javadoc folder"
                from 'src/main/javadoc/images'
                into 'build/docs/javadoc'
            }
        }
    }
}

task examplesJar(type: Jar) {
    archiveClassifier.set('examples')
    manifest {
        attributes('Implementation-Title': 'Java Nats Examples',
                'Implementation-Version': jarVersion,
                'Implementation-Vendor': 'nats.io')
    }
    from(sourceSets.main.output) {
        include "io/nats/examples/**"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task testsJar(type: Jar) {
    archiveClassifier.set('tests')
    from sourceSets.test.allSource
}

// run build before running fat jar to get classes
task fatJar(type: Jar) {
    archiveClassifier.set('fat')
    manifest {
        attributes('Implementation-Title': 'Java Nats With Dependencies',
                'Implementation-Version': jarVersion,
                'Implementation-Vendor': 'nats.io')
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
    afterEvaluate { // only report on main library not examples
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/examples/**', 'io/nats/client/support/Debug*'
                    ])
        }))
    }
}

artifacts {
    archives javadocJar, sourcesJar, examplesJar, testsJar
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = System.getenv('OSSRH_USERNAME')
            password = System.getenv('OSSRH_PASSWORD')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact examplesJar
            artifact javadocJar
            artifact testsJar
            pom {
                name = 'jnats'
                packaging = 'jar'
                groupId = group
                artifactId = archivesBaseName
                description = 'Client library for working with the NATS messaging system.'
                url = 'https://github.com/nats-io/nats.java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "synadia"
                        name = "Synadia"
                        email = "info@synadia.com"
                        url = "https://nats.io"
                    }
                }
                scm {
                    url = 'https://github.com/nats-io/nats.java'
                }
            }
        }
    }
}

if (isRelease) {
    signing {
        def signingKeyId = System.getenv('SIGNING_KEY_ID')
        def signingKey = System.getenv('SIGNING_KEY')
        def signingPassword = System.getenv('SIGNING_PASSWORD')
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign configurations.archives
        sign publishing.publications.mavenJava
    }
}

idea { module { downloadJavadoc = true; downloadSources = true } }

lombok { version = "latest.release" }

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
